/* You can add global styles to this file, and also import other style files */
@import '~@angular/material/theming';
@import './button-styles-mixin.scss';

//Emeralds Seas J Theme
// @import './es-light-palettes.scss';
// @import './es-dark-palettes.scss';
// @import './es-common-palettes.scss';
// @import './es-light-custom-palettes.scss';
// @import './es-dark-custom-palettes.scss';

//Blue Wave NT Theme
@import './bw-light-palettes.scss';
@import './bw-dark-palettes.scss';
@import './bw-common-palettes.scss';
@import './bw-light-custom-palettes.scss';
@import './bw-dark-custom-palettes.scss';

// Plus imports for other components in your app.

//our default font is Open Sans
$custom-typography: mat-typography-config(
  $font-family: 'Open Sans, sans-serif',
);

// Override typography for all Angular Material, including mat-base-typography and all components.
@include angular-material-typography($custom-typography);

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// If this mixin is included multiple times, your application will end up with multiple copies of these common styles.
// @include mat-core();

// Override the typography in the core CSS.
@include mat-core($custom-typography);


// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color//
// (See the palette files included at the top)

////////////////////////////////////////////////////////////////////// // Convert maps into 'palettes'

// mat-palette accepts $palette-name, main, lighter and darker variants
// If no numbers are provided Angular Material selects sensible defaults $default: 500, $lighter: 100, $darker: 700.
$nx-light-primary-palette: mat-palette($nx-light-primary-scheme, 600, 50, 900);
$nx-light-accent-palette: mat-palette($nx-light-accent-scheme, 500, 50, 900);
//$nx-warn-scheme:    mat-palette($mat-red);  //<< you can make a palette out of their pre-defined colors
$nx-light-warn-palette: mat-palette($nx-light-warn-scheme, 900, 50, 900); //<< or you can use your own.

//For the other colors (info, success) that aren't a part of the theme elements (primary, access, warn)
//you can create a palette here
$nx-grey-palette: mat-palette($nx-grey-scheme, greys);
$nx-light-success-palette: mat-palette($nx-light-success-scheme, successes);
$nx-light-info-palette: mat-palette($nx-light-info-scheme, infos);
$nx-light-caution-palette: mat-palette($nx-light-caution-scheme, cautions);

///////////////////////////////// START Create 'theme' from palettes /////////////////////////////////////////////////// // //

// Create the theme object. A theme consists of configurations for individual
// theming systems such as `color` or `typography`.
// Angular's theme has 3 colors (primary, access, warn(optional))
// The warn palette is optional (defaults to red).  They don't let you customize success/error (see workaround below)
//Theme background colors come from whether you base your custom theme off of the mat-light-theme or the dark theme
$nx-light-theme: mat-light-theme(
  (
    color: (
      primary: $nx-light-primary-palette,
      accent: $nx-light-accent-palette,
      warn: $nx-light-warn-palette,
    ),
  )
);

//// ////////////// START custom other colors in theme:
// Then you can merge the theme with your "other" palette after mat-light-theme row like this
// After this you have one object where every color is located.

// I'm not really sure that merging the other custom palettes with the theme is buying us anything here...
//other than the fact that the theme is all now in one object that can be passed to mixins.
//   In other words:
//   I don't believe that Angular Material will know to use these custom theme elements for anything.
//   without passing in the theme to the components, the components won't be using them either.
//   Perhaps we might have passed the theme in and pulled the colors from there if we had not
//   gone the route of using a color naming convention and just using the color variables directly
$nx-light-theme: map_merge(
  $nx-light-theme,
  (
    successes: $nx-light-success-palette,
    greys: $nx-grey-palette,
    infos: $nx-light-info-palette,
    cautions: $nx-light-caution-palette
  )
);


@include generateButtonStyles($nx-light-theme);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($nx-light-theme);

///////////////////////////////// END Light Theme //////////////////////////////////////////////////////// // //

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// START dark theme


////////////////////////////////////////// // Convert maps into 'palettes'

// mat-palette accepts $palette-name, main, lighter and darker variants
$nx-dark-primary-palette: mat-palette($nx-dark-primary-scheme, 500, 50, 900);
$nx-dark-accent-palette: mat-palette($nx-dark-accent-scheme, 500, 50, 900);
$nx-dark-warn-palette: mat-palette($nx-dark-warn-scheme, 900, 500, 900); //<< or you can use your own.

//For the other colors (info, success) that aren't a part of the theme elements (primary, access, warn)
//you can create a palette here
$nx-dark-success-palette: mat-palette($nx-dark-success-scheme, successes);
$nx-dark-info-palette: mat-palette($nx-dark-info-scheme, infos);
$nx-dark-caution-palette: mat-palette($nx-dark-caution-scheme, cautions);

////////////// START Create 'theme' from palettes ////////////// // //

// Create the theme object based off of mat-dark
$nx-dark-theme: mat-dark-theme(
  (
    color: (
      primary: $nx-dark-primary-palette,
      accent: $nx-dark-accent-palette,
      warn: $nx-dark-warn-palette,
    ),
  )
);

// merge the dark theme with your "other" palette
$nx-dark-theme: map_merge(
  $nx-dark-theme,
  (
    // custom: $nx-dark-custom-palette,
    successes: $nx-dark-success-palette,
    greys: $nx-grey-palette,
    infos: $nx-dark-info-palette,
    cautions: $nx-dark-caution-palette
  )
);


.darkMode {
  @include generateButtonStyles($nx-dark-theme);

  @include angular-material-color($nx-dark-theme);
}

html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, 'Helvetica Neue', sans-serif; // so that we can see our theme override this
}
